local B = require "scripts.basics"
local C = require "scripts.config"
local Grid = require "scripts.grid"

local PIPES = {
	{ t = 1, x = 9, y = 13 },
	{ t = 2, x = 9, y = 14 },
	{ t = 3, x = 7, y = 12 },
	{ t = 4, x = 8, y = 12 },
	{ t = 5, x = 8, y = 13 },
	{ t = 6, x = 6, y = 11 },
	{ t = 7, x = 5, y = 10 },
	{ t = 8, x = 10, y = 13 },
	{ t = 9, x = 9, y = 12 },
	{ t = 10, x = 8, y = 11 },
	{ t = 11, x = 7, y = 10 },
	{ t = 12, x = 10, y = 12 },
	{ t = 13, x = 9, y = 11 },

	{ t = 101, x = 10, y = 11 },
	{ t = 102, x = 9, y = 10 },
	{ t = 103, x = 11, y = 9 },
	{ t = 104, x = 11, y = 8 },
	{ t = 105, x = 11, y = 7 },
	{ t = 106, x = 11, y = 6 },
	{ t = 107, x = 10, y = 6 },
	{ t = 108, x = 10, y = 7 },
	{ t = 109, x = 10, y = 8 },
	{ t = 110, x = 10, y = 9 },
	{ t = 111, x = 10, y = 10 },

	{ t = 30, x = 11, y = 12 },
	{ t = 31, x = 12, y = 11 },
	{ t = 32, x = 13, y = 10 },
	{ t = 33, x = 14, y = 9 },
	{ t = 34, x = 11, y = 11 },
	{ t = 35, x = 12, y = 10 },
	{ t = 36, x = 13, y = 9 },
	{ t = 37, x = 11, y = 10 },
	{ t = 38, x = 12, y = 9 },
	{ t = 39, x = 13, y = 8 },

	
}

function init(self)
	msg.post(".", "acquire_input_focus")
	math.randomseed(os.time())
	self.pipe_handled = nil
	self.board_pipes = {}
	self.hover_tile = factory.create("#hover_factory", vmath.vector3(0))

	for i, cell in ipairs(PIPES) do
		B.place_pipe(cell.t, cell.x, cell.y)
	end
end

function on_input(self, action_id, action)
	-- screen_to_iso ahora devuelve nil, nil si no hay una celda válida
	local iso_x, iso_y = B.screen_to_iso_edit(action.x, action.y)

	if iso_x ~= nil and iso_y ~= nil then -- estamos en el area de la grilla
		local world_pos = B.iso_to_world(iso_x, iso_y)
		local z = B.get_z_for_cell(iso_x, iso_y)
		local key = iso_x .. "," .. iso_y
		go.set_position(world_pos, self.hover_tile) -- reubico el hover al lugar actual
		if action.released then
			--print("Celda:", iso_x, iso_y)
			local cell_from_menu = B.get_cell_by_coords(PIPES, iso_x, iso_y)	-- verificando si hizo click en una celda menú
			--print("area de menu")
			if cell_from_menu then
				go.delete(self.hover_tile)	-- borro el hover_tile
				self.pipe_handled = cell_from_menu	-- reemplazo el pipe_handled
				self.hover_tile = B.factory_pipe(cell_from_menu.t) -- creo un hover_tile con el pipe presente
			end
		end
		
		if not C.BANNED_CELLS_SET[key] and iso_x < 10 and iso_y < 10 then --Estamos sobre una celda válida.
			local world_pos_with_z = B.iso_to_world(iso_x, iso_y, z)
			if self.pipe_handled ~= nil then
				world_pos = world_pos_with_z -- seteo el z adecuado ahora que el hover es pipe
			end

			local updated_cell
			if action.released then
				local cell_with_pipe = B.get_cell_by_coords(self.board_pipes, iso_x, iso_y)	-- verificando si hay pipe en la celda clickead
				if self.pipe_handled then	-- hay un pipe seleccionado
					if cell_with_pipe then	-- click en celda con pipe -> intercambio los pipes:
						go.delete(self.hover_tile)	-- borro el hover_tile
						go.delete(cell_with_pipe.id)	-- borro del tablero el pipe presente
						B.delete_cell_by_coords(self.board_pipes, iso_x, iso_y)	-- borro la celda de la tabla tablero
						updated_cell = B.place_pipe(self.pipe_handled.t, iso_x, iso_y)	-- deposito en el tablero el pipe_handle
						table.insert(self.board_pipes, updated_cell)	-- guardo la celda alterada en la tabla tablero
						self.pipe_handled = cell_with_pipe	-- reemplazo el pipe_handled
						self.hover_tile = B.factory_pipe(cell_with_pipe.t)	-- creo un hover_tile con el pipe presente
					else	--click en celda sin pipe -> deposito el pipe_handled
						go.delete(self.hover_tile)	-- borro el hover_tile
						updated_cell = B.place_pipe(self.pipe_handled.t, iso_x, iso_y)	-- deposito en el tablero el pipe_handle
						table.insert(self.board_pipes, updated_cell)	-- guardo la celda alterada en la tabla tablero
						self.pipe_handled = nil	-- vacio el pipe_handled
						self.hover_tile = factory.create("#hover_factory", vmath.vector3(0)) -- reestablezco el hover tile
					end
				else	-- no hay pipe seleccionado
					if cell_with_pipe then	-- click en celda con pipe -> tomamos el pipe
						self.pipe_handled = cell_with_pipe -- guardo la celda en el pipe_handled
						go.delete(self.hover_tile) -- borro el hove actual
						go.delete(cell_with_pipe.id) -- borro del tablero el pipe presente
						B.delete_cell_by_coords(self.board_pipes, iso_x, iso_y)	-- borro la celda de la tabla tablero
						self.hover_tile = B.factory_pipe(cell_with_pipe.t) -- creo un hover_tile con el pipe presente
					end
--------------- click en celda sin pipe no hacemos nada
				end
			end
			go.set_position(world_pos, self.hover_tile) -- reubico el hover al lugar actual
		end
	end
end

function update(self, dt)
	Grid.draw_grid()
end

function on_message(self, message_id, message, sender)
	if message_id == hash("print_board") then
		for i, cell in ipairs(self.board_pipes) do
			print("{ t = " .. cell.t .. ", x = ".. cell.x ..", y = " .. cell.y .." },")
		end
	end
end
