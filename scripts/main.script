local B = require "scripts.basics"
local Grid = require "scripts.grid"
local Levels = require "scripts.levels"

function init(self)
	msg.post(".", "acquire_input_focus")
	factory.create("#tank_factory", vmath.vector3(76, 154, 1))
	factory.create("#city_factory", vmath.vector3(504, 404, 0))

	self.hover_tile = factory.create("#hover_factory", vmath.vector3(0))
	self.cells_marked = {}
	self.level_complete = false
end

function on_input(self, action_id, action)
	-- screen_to_iso ahora devuelve nil, nil si no hay una celda válida
	local iso_x, iso_y = B.screen_to_iso(action.x, action.y)

	if iso_x ~= nil and iso_y ~= nil and not self.level_complete then
		-- Estamos sobre una celda válida.
		local world_pos = B.iso_to_world(iso_x, iso_y)
		go.set_position(world_pos, self.hover_tile)

		if action.released then
			local cell_saved = B.get_cell_by_coords(self.cells_marked, iso_x, iso_y)
			if (cell_saved) then
				go.delete(cell_saved.id)
				B.delete_cell_by_coords(self.cells_marked, iso_x, iso_y)
			else
				local z = 1 - (iso_x / 10) - 0.1
				local world_pos_with_z = B.iso_to_world(iso_x, iso_y, z)
				local pipe_id = factory.create("#pipe_factory", world_pos_with_z)
				local cell = {
					id = pipe_id,
					pipe_type = "p1",
					x = iso_x,
					y = iso_y
				}
				table.insert(self.cells_marked, cell)
			end

			--for _, cell in ipairs(self.cells_marked) do
				--print(cell.id, cell.pipe_type, cell.x, cell.y)
			--end
			--print("................................")
			local grid_level = Levels.level_1
			--local cell_level = B.get_cell_by_coords(grid_level, iso_x, iso_y)
			--if (cell_level) then
				--if "p1" == cell_level.pipe_type then
					--print("CORRECT!")
				--end
				--end
			self.level_complete = B.check_level_complete(grid_level, self.cells_marked)
			if (self.level_complete) then
				local victory_id = factory.create("#done_factory", vmath.vector3(300, 300, 0))
				self.victory_go = victory_id
			end
		end
	-- imporante no borrar, marcador de celdas para armar los levels
		--print("Celda:", iso_x, iso_y)
	else
		-- Fuera de la cuadrícula o de una celda válida. Ocultamos el hover.
		go.set_position(vmath.vector3(10000, 10000, 0), self.hover_tile)
	end
end

function update(self, dt)
	Grid.drawGrid()
end
