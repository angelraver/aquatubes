local L = require "scripts.levels"

function update_world_buttons(self)
	for i = 1, 6 do
    local world_button_node = gui.get_node("world_" .. i)
    if i == self.selected_world then
      gui.play_flipbook(world_button_node, "level_done")
    else
      gui.play_flipbook(world_button_node, "level")
    end
  end

  for i = 1, 15 do
    if i == self.selected_level then
      gui.play_flipbook(gui.get_node("level_" .. i), "level")
    end
  end
end


function update_level_buttons(self)
  for i = 1, 15 do
    local level_button_node = gui.get_node("level_" .. i)
    if i == self.selected_level then
      gui.play_flipbook(level_button_node, "level_done")
    else
      gui.play_flipbook(level_button_node, "level")
    end
  end
end

local function update_sound_icon(is_on)
	local texture = is_on and "sound_on" or "sound_off"
	local node = gui.get_node("sound_pie")
	gui.play_flipbook(node, texture)
end

function init(self)
	msg.post(".", "acquire_input_focus")
	self.sound_on = true
	self.menu_button = gui.get_node("menu_button")
	self.selected_world = 1
	self.selected_level = 0
	update_world_buttons(self)
end

function  on_input(self, action_id, action)
	if action_id == hash("touch") and action.pressed then

		if gui.pick_node(gui.get_node("sound_button"), action.x, action.y) then
			self.sound_on = not self.sound_on
			update_sound_icon(self.sound_on)
			if self.sound_on then
				msg.post("main:/main", "play_theme")
			else
				msg.post("main:/main", "stop_theme")
			end
		end

		if gui.pick_node(self.menu_button, action.x, action.y) then
			msg.post("level_editor:/game_controller", "print_board")
		end

		for i = 1, 6 do
			if gui.pick_node(gui.get_node("world_" .. i), action.x, action.y) then
				self.selected_world = i
				self.selected_level = 0
				update_world_buttons(self)
				msg.post("level_editor:/game_controller", "level_selected", { world = self.selected_world, level = self.selected_level })
				break
			end
		end

		for i = 1, 15 do
			if gui.pick_node(gui.get_node("level_" .. i), action.x, action.y) then
				self.selected_level = i
				update_level_buttons(self)
				msg.post("level_editor:/game_controller", "level_selected", { world = self.selected_world, level = self.selected_level })
				break
			end
		end

	end
end
